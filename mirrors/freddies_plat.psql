-- so this was just to take out the money that was transfered from the freddies into their new "fannie" counterparts
-- it's still is that but now it will take the freddie plats  


SELECT COUNT(*)
FROM freddies
INNER JOIN ecs
ON freddies.cusip = ecs.fdonecusip
OR freddies.cusip = ecs.fdtwocusip;

-- so 136168 need to disappear 

--  so this makes the fdones disappear 

--  we will need to choose a date for the ecs..

-- honestly a bit confused by the logic... oh this first one just gets us the ones that are not involved with
-- mirrors 


create or replace PROCEDURE freddiesplatswithoutmirrors(ecsdate DATE)
language plpgsql
as
$$
declare
begin

    DROP TABLE IF EXISTS currentecs, fdminusmirrorone; 
 
    CREATE TEMP TABLE currentecs AS
    SELECT *
    FROM ecs
    WHERE date = ecsdate;

-- my table that looks for freddies untouched by the ec (mirror table) from the first columns
    CREATE TEMP TABLE fdminusmirrorone AS
    SELECT 
        f.cusip,
        f.name,
        f.indicator,
        f.issuedate,
        f.maturitydate,
        f.originalface
    FROM freddieplats f
    LEFT JOIN currentecs
    ON f.cusip = currentecs.fdonecusip
    -- why null
    WHERE currentecs.fdonecusip IS NULL;
 
--  this looks for freddies untouched by mirrors in 
    INSERT INTO freddiesplatswithoutmirrors
    SELECT 
        fdminusmirrorone.cusip,
        fdminusmirrorone.name,
        fdminusmirrorone.indicator,
        fdminusmirrorone.issuedate,
        fdminusmirrorone.maturitydate,
        fdminusmirrorone.originalface,
        ecsdate AS ecdate
    FROM fdminusmirrorone
    -- why I am joining 
    LEFT JOIN currentecs
    ON fdminusmirrorone.cusip = currentecs.fdtwocusip
    WHERE currentecs.fdtwocusip IS NULL;

    DROP TABLE IF EXISTS currentecs, fdminusmirrorone; 
 

end;

$$;

-- just use the latest ecsdate we will move onto bodies next which has 
freddiesplatswithoutmirrors(ecsdate DATE)

CALL freddiesplatswithoutmirrors('2022-02-03');

--------------------------------------------------------------

-- so this just subtracts the original face from the freddies that lost part of it 
-- seems to work should trnucate the table run it seperately and double check 
  
create or replace PROCEDURE freddiesplatswithadjusted(ecsdate DATE)
language plpgsql
as
$$
declare
begin

    DROP TABLE IF EXISTS currentecs; 
 
    CREATE TEMP TABLE currentecs AS
    SELECT *
    FROM ecs
    WHERE date = ecsdate;

    INSERT INTO freddiesplatswithoutmirrors
    SELECT 
        f.cusip,
        f.name,
        f.indicator,
        f.issuedate,
        f.maturitydate,
        f.originalface - currentecs.exchanged AS originalface,
        currentecs.date AS ecdate
    FROM freddieplats f
    INNER JOIN currentecs
    ON f.cusip = currentecs.fdonecusip;

    DROP TABLE IF EXISTS currentecs; 
 

end;

$$;

--  seems to work fine :) 
freddiesplatswithadjusted(ecsdate DATE);

CALL freddiesplatswithadjusted('2022-02-03')
    
SELECT *
INTO TEMP TABLE currentecs
FROM ecs
WHERE date = '2022-02-03';


SELECT 
    freddies.cusip,
    freddies.name,
    freddies.indicator,
    freddies.issuedate,
    freddies.maturitydate,
    freddies.originalface - currentecs.exchanged AS originalface,
    freddies.istbaelig,
    currentecs.date AS ecdate
FROM freddies
INNER JOIN currentecs
ON freddies.cusip = currentecs.fdonecusip
LIMIT 10;

-- now on to bodies.. shoudl I combine them maybe...


--  so it's a pretty similar procedure we have some that have nothing to do with mirrors and we have some
-- that need to be adjusted 

-- the ones that have nothing to do with the mirrors just get put in a table with the date of the ec file
-- the ones that need to be adjusted.. get a little adjusting and then put in that same table...

-- current ecs temp table

-- current freddiebodies table

-- elminate the first half of the mirrors, eliminate the second half and we are good

-- so this seems like a fine way of geting the freddie bodies that are not mirrored or mirrors and
-- adding a ec date so we know as of when this information is acurate..

-- just used the same pattern as I had been using I am sure I could have changes it a bit but why

-- need to make the table then put this in a stored procedure then add back the adjusted ones


create or replace PROCEDURE freddiesbodieswomirrors(freddiesdate DATE, ecsdate DATE)
language plpgsql
as
$$
declare
begin

    DROP TABLE IF EXISTS currentecs, currentfreddiebodies, fbwomirrorsone;

    CREATE TEMP TABLE currentecs AS
    SELECT *
    FROM ecs
    WHERE date = ecsdate;

    CREATE TEMP TABLE currentfreddiebodies AS
    SELECT *
    FROM freddiebodies
    WHERE date = freddiesdate;

    CREATE TEMP TABLE fbwomirrorsone AS 
    SELECT 
        currentfreddiebodies.cusip,
        currentfreddiebodies.coupon,
        currentfreddiebodies.remainingbalance,
        currentfreddiebodies.factor,
        currentfreddiebodies.gwac,
        currentfreddiebodies.wam,
        currentfreddiebodies.wala,
        currentfreddiebodies.date
    FROM currentfreddiebodies
    LEFT JOIN currentecs
    ON currentfreddiebodies.cusip = currentecs.fdonecusip
    WHERE currentecs.fdonecusip IS NULL;


    INSERT INTO freddiebodieswomirrors
    SELECT 
        fbwomirrorsone.cusip,
        fbwomirrorsone.coupon,
        fbwomirrorsone.remainingbalance,
        fbwomirrorsone.factor,
        fbwomirrorsone.gwac,
        fbwomirrorsone.wam,
        fbwomirrorsone.wala,
        fbwomirrorsone.date,
        ecsdate AS ecdate
    FROM fbwomirrorsone
    LEFT JOIN currentecs
    ON fbwomirrorsone.cusip = currentecs.fdtwocusip
    WHERE currentecs.fdtwocusip IS NULL;


    DROP TABLE IF EXISTS currentecs, currentfreddiebodies, fbwomirrorsone;

end;

$$;

--  seems to work 
freddiesbodieswomirrors(freddiesdate DATE, ecsdate DATE)

CALL freddiesbodieswomirrors('2022-02-04', '2022-02-03');


SELECT COUNT(*)
FROM freddiebodies
INNER JOIN ecs
ON freddiebodies.cusip = ecs.fdonecusip
WHERE freddiebodies.date = '2022-02-04';


SELECT COUNT(*)
FROM freddiebodieswomirrors
INNER JOIN ecs
ON freddiebodieswomirrors.cusip = ecs.fdonecusip;






---------------------------------------

-- going to use this as the skeleton of my next step 

-- so here I need to add back the freedie bodies but adjust their current face
-- seems to work need to turn it into a stored procedure 


create or replace PROCEDURE freddiesbodieswomirrorsadjustedcurrface(freddiesdate DATE, ecsdate DATE)
language plpgsql
as
$$
declare
begin

    DROP TABLE IF EXISTS currentecs, currentfreddiebodies;

    CREATE TEMP TABLE currentecs AS
    SELECT *
    FROM ecs
    WHERE date = ecsdate;

    CREATE TEMP TABLE currentfreddiebodies AS
    SELECT 
        freddiebodies.cusip,
        freddiebodies.coupon,
        freddies.originalface,
        freddiebodies.remainingbalance,
        freddiebodies.remainingbalance / freddies.originalface as factor,
        freddiebodies.gwac,
        freddiebodies.wam,
        freddiebodies.wala,
        freddiebodies.date
    FROM freddies
    INNER JOIN freddiebodies
    ON freddies.cusip = freddiebodies.cusip
    WHERE freddiebodies.date = freddiesdate;
  
    INSERT INTO freddiebodieswomirrors
    SELECT 
        currentfreddiebodies.cusip,
        currentfreddiebodies.coupon,
        CASE 
            WHEN currentecs.exchanged = 0 THEN currentfreddiebodies.remainingbalance
            ELSE currentfreddiebodies.factor * (currentfreddiebodies.originalface - currentecs.exchanged)
            END AS remainingbalance,
        currentfreddiebodies.factor,
        currentfreddiebodies.gwac,
        currentfreddiebodies.wam,
        currentfreddiebodies.wala,
        currentfreddiebodies.date,
        currentecs.date AS ecsdate
    FROM currentfreddiebodies
    INNER JOIN currentecs
    ON currentfreddiebodies.cusip = currentecs.fdonecusip;

    DROP TABLE IF EXISTS currentecs, currentfreddiebodies;

end;

$$;

freddiesbodieswomirrorsadjustedcurrface(freddiesdate DATE, ecsdate DATE)

CALL freddiesbodieswomirrorsadjustedcurrface('2022-02-04', '2022-02-03');

